orithm for a simple compiler quoted from the Jack Crenshaw acticles on building you own compiler. See .....

Algorithm for a simple compiler quoted from the Jack Crenshaw acticles on building you own compiler. See .....


DEFINITIONS

Expressions - One or more terms seperated by addition operations

	<expression>::= <term> [ <addition operation> <term> ]*

Term - One or more factors seperated by multiplication operations

	<term>::= <factor> [ <multiplication operation> <factor> ]*

Factor - An expression for evaluation

	<factor>::=  <number> | (<expression>) | <variable>

	<expression> :: <term>

	<expression> :: [1,2,3,4...n]

Identity

	<letter>::= <letter> [ <letters>|<digit> ]*


Number

	<number>::= [<digit>]+



				* == zero or more occurences

				+ == one or more occurences

OBSERVATION

Expressions are reduced to terms plus addition operations

Terms are reduced to factors plus multiplication operations

Factors are reduced to expressions or digits


//-----------------------------------------------------------
//-----------------------------------------------------------
//-----------------------------------------------------------
//-----------------------------------------------------------
//-----------------------------------------------------------

//-----------------------------------------------------------
// global - the global variables

CR = ^M		// carrage return

Look 		// global look ahead variable

TRUE = 1
FALSE = 0

//-----------------------------------------------------------

//-----------------------------------------------------------
// GetChar() - Read the next character in the input string
//		and place the result in Look 
GetChar
	Look = read(input character)
//-----------------------------------------------------------

//-----------------------------------------------------------
// Expected(string) - Print string as an error message
// 
Expected(string)
	print *********************
	print string + 'Expected'
	print *********************
//-----------------------------------------------------------


//-----------------------------------------------------------
// Match(character) - Check to see if Look is equal to character and
//			get the character if they are equal 
Match(character)
	if Look = character then GetChar
	else Expected(character)
//-----------------------------------------------------------


//-----------------------------------------------------------
// IsAlpha(character) - Check to see if character is an 
//				alphabetic character
IsAlpha
	if character == [a,b,c...z]
		return TRUE
	else
		return FALSE
//-----------------------------------------------------------


//-----------------------------------------------------------
// IsAlNum - Recognize an alphanumeric
IsAlNum(string)

	if IsAlpha(string[0])
		return TRUE
	elif IsDigit(string[0])
		return TRUE
	else
		return FALSE


//-----------------------------------------------------------
// IsAddOp(character) - Check to see if character is an addition
//				or subtraction operation
IsAddOp(character)	

	if character == ['+' | '-']
		return TRUE
	else
		return FALSE
//-----------------------------------------------------------

//-----------------------------------------------------------
// IsDigit(character) - Check to see if character is a numerical digit
IsDigit(character)

	if character == [0,1,2,3...9]
		return TRUE
	else
		return FALSE
//-----------------------------------------------------------


//-----------------------------------------------------------
// GetName - If Looks is a name get the name and
//		advance the charater stream
GetName()

	if not IsAlpha(Look) then Expected('Name')
	else
		GetName = Look
		GetChar
//-----------------------------------------------------------


//-----------------------------------------------------------		
// GetNum - If Look is a number get the number and
//		advance the character stream  
GetNum()

	if not IsDigit(Look) then Expected('Integer')
	else
		GetNum = Look
		GetChar
//-----------------------------------------------------------


//-----------------------------------------------------------
// Emit - Output a string with a Tab
Emit(string)

	print TAB + string	
//-----------------------------------------------------------


//-----------------------------------------------------------
// EmitLn - Output a string with Tab and CRLF
EmitLn(string)

	Emit(string)
	print CRLF
//-----------------------------------------------------------

//-----------------------------------------------------------
// Init - Initialize the program
Init()
	GetChar()
//-----------------------------------------------------------

//-----------------------------------------------------------
// Main - Starts the program
Main
	Init()
	// Expression()
	Assignment()
	if Look != CR then Expected('Newline')
//-----------------------------------------------------------


//-----------------------------------------------------------
// Factor - Parse and translate a math factor
Factor()

	if Look == '(' then
		Match('(')
		Expression()
		Match(')')
	else if IsAlpha(Look) then
		Ident()
	else
		EmitLn('MOVE #' + GetNum() + 'D0')
//-----------------------------------------------------------


//-----------------------------------------------------------
// Ident - Parse and translae an Identifier
Ident()
	Name = GetName
	if Look = '(' then
		Match('(')
		Match(')')
		EmitLn('BSR' + Name)
	else
		EmitLn('Move ' + Name + '(PC),D0')
//-----------------------------------------------------------


//-----------------------------------------------------------
// Multiply - Recognize and translate a multiplication
Multiply()
	Match('*')
	Factor()
	EmitLn('MULS (SP)+,DO')
//-----------------------------------------------------------

//-----------------------------------------------------------
// Divide - Recognize and Translate a divide
Divide()
	Match('/')
	Factor()
	EmitLn('MOVE (SP)+,D1)
	EmitLn('DIVS D1,D0')
//-----------------------------------------------------------


//-----------------------------------------------------------
// Term - Parse and translate a math term
Term()
	Factor
	while Look in ['*', '/'] do begin
		EmitLn('MOVE #' + GetNum()  + ',D0')
		case Look of
			'*': Mutiply
			'/': Divide
		else
			Expected ('Multiplication Operation')
	end while
//-----------------------------------------------------------


//-----------------------------------------------------------
// Add - Recognize and translate an Addition operation
Add()
	Match('+')
	Term()
	EmitLn('ADD (SP)+,D0')
//-----------------------------------------------------------


//-----------------------------------------------------------
// Subtract - Recognize and translate a Subtraction operation
Subtract()

	Match('-')
	Term()
	EmitLn('SUB (SP)+,D0')
	EmitLn('NEG D0')	
//-----------------------------------------------------------


//-----------------------------------------------------------	
// Expression - Parse and translate an expression
Expression()

	if IsAddOp(Look) then
		EmitLn(CLR D0')
	else
		Term()
	while Look in [ '+', '-'] do begin
		EmitLn('MOVE D0,-(SP)')
		case Look of
			'+' Add()
			'-' Sub()
		else 
			Expected('Addition Operation')
	end do

//-----------------------------------------------------------
// Assignment() - Parse and translate an assignment statement
Assignment()

	Name = GetName
	Match('=')
	Expression
	EmitLn('LEA ' + Name + '(PC),A0')
	EmitLn('MOVE D0,(A0)')
//-----------------------------------------------------------


//-----------------------------------------------------------
//-----------------------------------------------------------
//-----------------------------------------------------------